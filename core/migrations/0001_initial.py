# Generated by Django 4.2.13 on 2024-06-16 10:32

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Favourite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'ordering': ['pk'],
            },
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('like', models.BooleanField(default=False)),
                ('just_watched', models.BooleanField(default=True)),
                ('date', models.DateTimeField(default=django.utils.timezone.now, null=True)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('poster', models.ImageField(blank=True, default='static/default_movie_poster.svg', upload_to='movie_posters')),
                ('plot', models.TextField()),
                ('genres', models.CharField(max_length=50)),
                ('director', models.CharField(max_length=50)),
                ('cast', models.CharField(max_length=150)),
                ('runtime', models.DurationField()),
                ('release_date', models.DateField()),
                ('views_total', models.PositiveIntegerField()),
                ('reviews_total', models.PositiveIntegerField()),
            ],
            options={
                'ordering': ['release_date'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('propic', models.ImageField(blank=True, default='static/default_propic.svg', upload_to='profile_pictures')),
                ('bio', models.TextField(blank=True)),
                ('favourites', models.ManyToManyField(blank=True, related_name='favourites', through='core.Favourite', to='core.movie')),
                ('follows', models.ManyToManyField(blank=True, related_name='followers', through='core.Follow', to='core.profile')),
                ('logs', models.ManyToManyField(blank=True, related_name='logs', through='core.Log', to='core.movie')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('stars_total', models.PositiveIntegerField()),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.movie')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.profile')),
            ],
            options={
                'ordering': ['-date', 'profile'],
            },
        ),
        migrations.CreateModel(
            name='WatchList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.PositiveIntegerField()),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('movie', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.movie')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.profile')),
            ],
            options={
                'ordering': ['-priority', '-date'],
            },
        ),
        migrations.CreateModel(
            name='Star',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.profile')),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.review')),
            ],
        ),
        migrations.AddField(
            model_name='profile',
            name='reviews',
            field=models.ManyToManyField(blank=True, related_name='reviews', through='core.Review', to='core.movie'),
        ),
        migrations.AddField(
            model_name='profile',
            name='stars',
            field=models.ManyToManyField(blank=True, related_name='stars', through='core.Star', to='core.review'),
        ),
        migrations.AddField(
            model_name='profile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='profile',
            name='whatchlist',
            field=models.ManyToManyField(blank=True, related_name='watchlists', through='core.WatchList', to='core.movie'),
        ),
        migrations.AddField(
            model_name='movie',
            name='production',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='production', to='core.profile'),
        ),
        migrations.AddField(
            model_name='log',
            name='movie',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.movie'),
        ),
        migrations.AddField(
            model_name='log',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.profile'),
        ),
        migrations.AddField(
            model_name='follow',
            name='follows',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.profile'),
        ),
        migrations.AddField(
            model_name='follow',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.profile'),
        ),
        migrations.AddField(
            model_name='favourite',
            name='movie',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.movie'),
        ),
        migrations.AddField(
            model_name='favourite',
            name='profile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.profile'),
        ),
        migrations.AddConstraint(
            model_name='watchlist',
            constraint=models.UniqueConstraint(fields=('profile', 'movie'), name='unique_watchlist'),
        ),
        migrations.AddConstraint(
            model_name='star',
            constraint=models.UniqueConstraint(fields=('profile', 'review'), name='unique_star'),
        ),
        migrations.AddConstraint(
            model_name='review',
            constraint=models.UniqueConstraint(fields=('profile', 'movie'), name='unique_review'),
        ),
        migrations.AddConstraint(
            model_name='log',
            constraint=models.UniqueConstraint(fields=('profile', 'movie'), name='unique_log'),
        ),
        migrations.AddConstraint(
            model_name='follow',
            constraint=models.UniqueConstraint(fields=('profile', 'follows'), name='unique_follow'),
        ),
        migrations.AddConstraint(
            model_name='favourite',
            constraint=models.UniqueConstraint(fields=('profile', 'movie'), name='unique_favourite'),
        ),
    ]
